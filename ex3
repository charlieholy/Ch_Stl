　　bool:                     b
　　char:                     c
　　signed char:              a
　　unsigned char:            h
　　(signed) short (int):     s
　　unsigned short (int):     t
　　(signed) (int):           i
　　unsigned (int):           j
　　(signed) long (int):      l
　　unsigned long (int):      m
　　(signed) long long (int): x
　　unsigned long long (int): y
　　float:                    f
　　double:                   d
　　long double:              e

/////////////////////////////////////////////////////////////////////
  
#include <new>
#include <cstddef>
#include <cstdlib>
#include <climits>
#include <iostream>
using namespace std;
namespace JJ
{
  template <class T>
  inline T* _allocate(ptrdiff_t size,T*){
    set_new_handler(0);
    T* tmp = (T*)(::operator new((size_t)(size * sizeof(T))));

  }

}

int main()
{ 
	int a = 0;
	size_t b = 0;
	cout << typeid(a).name()<< endl;
	cout << typeid(b).name()<< endl;
  return 0;
}
////////
class Fa{
public :
int a ;
Fa(){}
virtual int get(){
  return a;
} 
};


class Son : public Fa{
public :
Son(){}
};
#include <iostream>
using namespace std;
int main()
{
	Fa* fa =new Son();
	cout << "L:" << typeid(*fa).name() << endl;
  return 0;
}
 典型的RTTI是通过在VTABLE中放一个额外的指针来实现的。 
L:3Son

将Fa类改为

class Fa{
public :
int a ;
Fa(){}
//    virtual int get(){
//      return a;
//   } 
};
这时没有虚函数了，也就是说哪一个特殊的额外的指针没有地方放了，

此时结果 *fa的类别显示是Fa；
